/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.gui;

import com.dao.PetOnStoreDTO;
import com.dao.PetProductDTO;
import com.dao.ProductDTO;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author DUC PHU
 */
public class FindImportItem extends javax.swing.JPanel {

    /**
     * Creates new form FindInvoiceItem
     */
    ProductDTO product;
    CreateImportUI addUI;
    Validator valid = new Validator();
    ArrayList<ProductDTO> addedList;  
    ArrayList<AddedImportItem> addedPanelItemList;
    AddImportItemUI findUI;
    int quantity = 0;
    public FindImportItem(ProductDTO product, CreateImportUI addUI, ArrayList<ProductDTO> addedList, ArrayList<AddedImportItem> addedPanelItemList, AddImportItemUI findUI) {
        this.product = product;
        this.addUI = addUI;
        this.addedList = addedList;
        this.addedPanelItemList = addedPanelItemList;
        this.findUI = findUI;
        initComponents();
        svgAddBtn.setSVGImage("com/image/add.svg", 30, 30);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbID = new javax.swing.JLabel();
        lbName = new javax.swing.JLabel();
        lbQuantity = new javax.swing.JLabel();
        lbSoldPrice = new javax.swing.JLabel();
        svgAddBtn = new com.gui.SvgImage();

        lbID.setText("SP001");

        lbName.setText("Mèo Anh lông ngắn chân dài tới nách");

        lbQuantity.setText("369");

        lbSoldPrice.setText("10.000.000.000");

        svgAddBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                svgAddBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbID, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbName, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(lbQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(lbSoldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(svgAddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(svgAddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 5, Short.MAX_VALUE))
            .addComponent(lbID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbSoldPrice, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbQuantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        lbID.setText(product.getId());
        lbName.setText(product.getName());
        if(product instanceof PetProductDTO)
        {
            PetProductDTO petPro = (PetProductDTO) product;
            quantity = petPro.getInStock();
            lbQuantity.setText(quantity+"");
        }
        else{
            quantity = 1;
            lbQuantity.setText("1");
        }
        lbSoldPrice.setText(""+valid.formatMoney(product.getImportPrice()));
    }// </editor-fold>//GEN-END:initComponents

    private void svgAddBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_svgAddBtnMouseClicked
        // TODO add your handling code here:
        if(addUI.addedList.isEmpty())
        {
            addUI.addImportItem(product);
            addUI.editImportTotal();
            findUI.dispose();
        }
        else{
            String flag = "donthave";
            ArrayList<ProductDTO> tempList = new ArrayList<>(addedList);
            for (ProductDTO pro : tempList) {
                if (product.getId().equalsIgnoreCase(pro.getId())) {
                    JOptionPane.showMessageDialog(null, "sản phẩm đã có trong phiếu nhập");
                    flag = "have";
                    break;
                }
            }
            if(flag.equals("donthave"))
            {
                addUI.addImportItem(product);
                addUI.editImportTotal();
                findUI.dispose();
            }
        }

//        if(addedList.size() == 0)
//        {
//            addedList.add(product);
//            AddedInvoiceItem item = new AddedInvoiceItem(product, addUI);
//            addedPanelItemList.add(item);
//        }
//        else{
//            String flag = "";
//            for(ProductDTO productTemp : addedList)
//            {
//                if(productTemp.getId().equalsIgnoreCase(product.getId()))
//                {
//                    
//                }
//            }
//        }
//        addedList.add(product);
//        AddedInvoiceItem item = new AddedInvoiceItem(product, addUI);
//        addedPanelItemList.add(item);
//        addUI.editTotalAmount();
//        addUI.refreshAddTable();
    }//GEN-LAST:event_svgAddBtnMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbID;
    private javax.swing.JLabel lbName;
    private javax.swing.JLabel lbQuantity;
    private javax.swing.JLabel lbSoldPrice;
    private com.gui.SvgImage svgAddBtn;
    // End of variables declaration//GEN-END:variables
}
