/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.gui;

import com.bus.BreedAnalysisBUS;
import com.bus.BreedBUS;
import com.bus.MonthlyAnalysisBUS;
import com.bus.PetProductTypeBUS;
import com.dao.BreedAnalysisDTO;
import com.dao.BreedDTO;
import com.dao.MonthlyAnalysisDTO;
import com.dao.PetProductTypeDTO;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.time.LocalDate;
import java.util.ArrayList;

/**
 *
 * @author DUC PHU
 */
public class AnalysisPanel extends javax.swing.JPanel {

    /**
     * Creates new form AnalysisPanel
     */
    
    int year = 0;
    String productChoose = "";
    String category = "";
    String flag = "pet";
    BreedBUS breBus = new BreedBUS();
    PetProductTypeBUS typeBus = new PetProductTypeBUS();
    ArrayList<MonthItem> monthPaneList = new ArrayList<>();
    
    MonthlyAnalysisBUS proAnalysisBus = new MonthlyAnalysisBUS();
    BreedAnalysisBUS breAnalysisBus = new BreedAnalysisBUS();
    public AnalysisPanel() {
        initComponents();
        svgIcon.setSVGImage("com/image/statistics.svg", 90, 90);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        svgIcon = new com.gui.SvgImage();
        jLabel1 = new javax.swing.JLabel();
        MonthTable = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbbYear = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbbProductChoose = new javax.swing.JComboBox<>();
        btnFind = new javax.swing.JButton();
        cbbCategoryChoose = new javax.swing.JComboBox<>();

        svgIcon.setText("icon");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 0));
        jLabel1.setText("THỐNG KÊ");

        MonthTable.setBackground(new java.awt.Color(255, 255, 204));

        javax.swing.GroupLayout MonthTableLayout = new javax.swing.GroupLayout(MonthTable);
        MonthTable.setLayout(MonthTableLayout);
        MonthTableLayout.setHorizontalGroup(
            MonthTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        MonthTableLayout.setVerticalGroup(
            MonthTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Năm");

        cbbYear.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cbbYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbYearActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Theo loại");

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Theo(thú hoặc sản phẩm)");

        cbbProductChoose.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cbbProductChoose.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Thú", "Sản phẩm cho thú" }));
        cbbProductChoose.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbProductChooseItemStateChanged(evt);
            }
        });

        btnFind.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnFind.setText("Tìm");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        cbbCategoryChoose.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        cbbCategoryChoose.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbCategoryChooseItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(svgIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MonthTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(83, 83, 83)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(cbbProductChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(69, 69, 69)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbbCategoryChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(81, 81, 81)
                                        .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(svgIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbbCategoryChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbbProductChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(MonthTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        loadMonthItem();
        jLabel1.setPreferredSize(new Dimension(1200, 360));
        loadCbbYear();
        loadCbbCategoryDefault();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        // TODO add your handling code here:
        year = Integer.parseInt(cbbYear.getSelectedItem().toString());
        category = cbbCategoryChoose.getSelectedItem().toString();
        
        //reset info
        for(MonthItem item : monthPaneList)
        {
            item.resetInfo();
            item.setYear(year);
        }
        
        if(flag.equalsIgnoreCase("all"))
        {
            
        }
        
        else if(flag.equalsIgnoreCase("pet"))
        {
            
            String breName = cbbCategoryChoose.getSelectedItem().toString();
            String breID = breBus.getID(cbbCategoryChoose.getSelectedItem().toString());
            for(BreedAnalysisDTO bre : breAnalysisBus.analysisList)
            {
                if(bre.getYear() == year && 
                        bre.getBreedID().equalsIgnoreCase(breID))
                {
                    for(MonthItem item : monthPaneList)
                    {
                        if(bre.getMonth() == item.month)
                        {
                            item.setFlag(flag);
                            item.setSoldQuantity(bre.getSoldQuantity());
                            item.setRevenue(bre.getProfit());
                            item.setCategory(breID);
//                            item.setInfo();
                        }
                    }
                    
                }
            }
        }
        else if(flag.equalsIgnoreCase("product"))
        {
            String categoryID = typeBus.getID(cbbCategoryChoose.getSelectedItem().toString());
            for(MonthlyAnalysisDTO monthTemp : proAnalysisBus.analysisList)
            {
                if(monthTemp.getYear() == year && 
                        monthTemp.getTypeID().equalsIgnoreCase(categoryID))
                {
//                    System.out.println("year : "+monthTemp.getYear());
//                    System.out.println("list's month :"+monthTemp.getMonth());
                    for(MonthItem item : monthPaneList)
                    {  
//                        System.out.println("pane month :" +item.month);
                        if(item.month == monthTemp.getMonth())
                        {
//                            System.out.println("tim thay :" +monthTemp.getMonth());
//                            System.out.println("month "+monthTemp.getMonth());
                            item.setFlag(flag);
                            item.setSoldQuantity(monthTemp.getSoldQuantity());
                            item.setRevenue(monthTemp.getProfit());
                            item.setCategory(categoryID);
//                            item.setInfo();
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void cbbProductChooseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbProductChooseItemStateChanged
        // TODO add your handling code here:
        productChoose = cbbProductChoose.getSelectedItem().toString();
        cbbCategoryChoose.removeAllItems();
        if(productChoose.equalsIgnoreCase("tất cả"))
        {
            cbbCategoryChoose.addItem("Tất cả");
            flag = "all";
        }
        else if(productChoose.equalsIgnoreCase("Thú"))
        {
            flag = "pet";
            cbbCategoryChoose.addItem("Tất cả");
            for(BreedDTO bre : breBus.breedList)
            {
                cbbCategoryChoose.addItem(bre.getName());
            }
        }
        else if(productChoose.equalsIgnoreCase("Sản phẩm cho thú"))
        {
            flag = "product";
            cbbCategoryChoose.addItem("Tất cả");
            for(PetProductTypeDTO type : typeBus.typeList)
            {
                cbbCategoryChoose.addItem(type.getName());
            }
        }
    }//GEN-LAST:event_cbbProductChooseItemStateChanged

    private void cbbCategoryChooseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbCategoryChooseItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbCategoryChooseItemStateChanged

    private void cbbYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbYearActionPerformed

    public void loadCbbCategoryDefault()
    {
        
                cbbCategoryChoose.addItem("Tất cả");
            
    }
    
    public void loadMonthItem()
    {
        MonthTable.removeAll();
        MonthTable.revalidate();
        MonthTable.repaint();
        MonthTable.setLayout(new GridLayout(1, 12));
        for(int i = 1; i <= 12; i ++)
        {
            MonthItem item = new MonthItem();
            item.setMonth(i);
            MonthTable.add(item);
            monthPaneList.add(item);
        }
    }
    
    public void loadCbbYear()
    {
        int currentYear = LocalDate.now().getYear();
        for(int i = 2019; i <= currentYear; i ++)
        {
            cbbYear.addItem(i+"");
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MonthTable;
    private javax.swing.JButton btnFind;
    private javax.swing.JComboBox<String> cbbCategoryChoose;
    private javax.swing.JComboBox<String> cbbProductChoose;
    private javax.swing.JComboBox<String> cbbYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private com.gui.SvgImage svgIcon;
    // End of variables declaration//GEN-END:variables
}
