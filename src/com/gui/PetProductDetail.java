/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.gui;

import com.bus.PetProductBUS;
import com.bus.PetProductTypeBUS;
import com.bus.SupplierTempBUS;
import com.dao.PetProductDTO;
import com.dao.PetProductTypeDTO;
import com.dao.SupplierDTO;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author DUC PHU
 */
public class PetProductDetail extends javax.swing.JFrame {

    /**
     * Creates new form PetProductDetail
     */
    private String imageUrl = "null";
    private JFileChooser fileChooser = new JFileChooser();
    private File selectedFile;
    private String imagePath;
    ProductUI ui;
    SupplierTempBUS supplier = new SupplierTempBUS();
    PetProductTypeBUS typeBus = new PetProductTypeBUS();
    PetProductBUS productBus = new PetProductBUS();
    PetProductDTO product;
    
    private String supName;
    private String typeName;
    Validator valid = new Validator();
    public PetProductDetail(PetProductDTO product) {
        this.product = product;
        this.imageUrl = product.getImageUrl();
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbNameID = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfImportPrice = new javax.swing.JTextField();
        inputImPrice = new javax.swing.JButton();
        tfSoldPrice = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        inputSoldPrice = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cbbSupplier = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        cbbCategory = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tfInStock = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tfDescription = new javax.swing.JTextArea();
        lbImage = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnAddImage = new javax.swing.JButton();
        btnDeleteImage = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbNameID.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lbNameID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbNameID.setText("jLabel1");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Giá Nhập");

        tfImportPrice.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfImportPrice.setText("1.000.000.000");

        inputImPrice.setText("+");
        inputImPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputImPriceActionPerformed(evt);
            }
        });

        tfSoldPrice.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfSoldPrice.setText("1.000.000.000");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Giá bán");

        inputSoldPrice.setText("+");
        inputSoldPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputSoldPriceActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Bên cung cấp");

        cbbSupplier.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setText("Loại sản phẩm");

        cbbCategory.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel12.setText("Tên");

        tfName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel9.setText("Số lượng");

        tfInStock.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfInStock.setText("Rất là nặng(100 kg)");

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setText("Thông tin mô tả");

        tfDescription.setColumns(20);
        tfDescription.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tfDescription.setRows(5);
        jScrollPane1.setViewportView(tfDescription);
        tfDescription.setWrapStyleWord(true);
        tfDescription.setLineWrap(true);
        tfDescription.setText(product.getDescription());

        lbImage.setBackground(new java.awt.Color(255, 255, 255));
        lbImage.setOpaque(true);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel11.setText("Ảnh : ");

        btnAddImage.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnAddImage.setText("Chọn ảnh");
        btnAddImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddImageActionPerformed(evt);
            }
        });

        btnDeleteImage.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnDeleteImage.setText("Xóa ảnh");
        btnDeleteImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteImageActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnSave.setText("Lưu");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbNameID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputSoldPrice))
                        .addComponent(tfSoldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputImPrice))
                        .addComponent(tfImportPrice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 318, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfInStock, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnAddImage)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeleteImage))
                        .addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(70, 70, 70))
            .addGroup(layout.createSequentialGroup()
                .addGap(402, 402, 402)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(206, 206, 206)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lbNameID, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfInStock, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(inputImPrice))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfImportPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(inputSoldPrice))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfSoldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(btnAddImage)
                            .addComponent(btnDeleteImage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        lbNameID.setText(product.getName()+ " "+product.getId());
        String importPriceString = valid.formatMoney(product.getImportPrice());
        tfImportPrice.setText(""+importPriceString);
        String soldPriceString = valid.formatMoney(product.getSoldPrice());
        tfSoldPrice.setText(""+soldPriceString);
        loadSup();
        supName = supplier.getName(product.getSupplierId());
        cbbSupplier.setSelectedItem(supName+"");
        loadCategory();
        typeName = typeBus.getName(product.getCategoryID());
        cbbCategory.setSelectedItem(typeName+"");
        tfName.setText(product.getName()+"");
        tfInStock.setText(product.getInStock()+"");
        setImage();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void inputImPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputImPriceActionPerformed
        // TODO add your handling code here:
        PriceInput input = new PriceInput(tfImportPrice);
        input.setVisible(true);
    }//GEN-LAST:event_inputImPriceActionPerformed

    private void inputSoldPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputSoldPriceActionPerformed
        // TODO add your handling code here:
        PriceInput input = new PriceInput(tfSoldPrice);
        input.setVisible(true);
    }//GEN-LAST:event_inputSoldPriceActionPerformed

    private void btnAddImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddImageActionPerformed
        // TODO add your handling code here:
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            // Lấy đường dẫn của tệp hình ảnh được chọn
            selectedFile = fileChooser.getSelectedFile();
            imagePath = selectedFile.getAbsolutePath();

            // Thực hiện các bước tiếp theo ở đây

            imageUrl = selectedFile.getName()+"";
            ImageIcon imageIcon = new ImageIcon("" +imagePath);
            Image image = imageIcon.getImage();
            int labelWidth = lbImage.getWidth();
            int labelHeight = lbImage.getHeight();
            Image newImage = image.getScaledInstance(labelWidth, labelHeight, Image.SCALE_SMOOTH);
            ImageIcon newImageIcon = new ImageIcon(newImage);
            lbImage.setIcon(newImageIcon);
        }
    }//GEN-LAST:event_btnAddImageActionPerformed

    private void btnDeleteImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteImageActionPerformed
        // TODO add your handling code here:
        imageUrl = "null";
        lbImage.setIcon(null);
    }//GEN-LAST:event_btnDeleteImageActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(!imageUrl.equals(product.getImageUrl()))
        {
            if(imageUrl.equals("null"))
            {
                product.setImageUrl(imageUrl);
            }
            else{
                product.setImageUrl(imageUrl);
                File sourceImageFile = new File(imagePath);
                File destinationImageFile = new File("src/com/image/" + selectedFile.getName());
                try {
                    Files.copy(sourceImageFile.toPath(), destinationImageFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        if(!tfName.getText().equalsIgnoreCase(product.getName()))
        {
            product.setName(tfName.getText()+"");
        }

        Long importPrice = valid.convertStringToLong(tfImportPrice.getText());
        if(importPrice != product.getImportPrice())
        {
            product.setImportPrice(importPrice);
        }
        Long soldPrice = valid.convertStringToLong(tfSoldPrice.getText());
        if(soldPrice != product.getSoldPrice())
        {
            product.setSoldPrice(soldPrice);
        }

        if(!tfDescription.getText().equalsIgnoreCase(product.getDescription()))
        {
            product.setDescription(tfDescription.getText()+"");
        }

        if(!cbbSupplier.getSelectedItem().toString().equalsIgnoreCase(supName))
        {
            String newSupID = supplier.getID(cbbSupplier.getSelectedItem().toString());
            product.setSupplierId(newSupID);
        }

        productBus.edit(product);
        loadInfo();
//        ui.refreshTable();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:

        int result = JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa ?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if( result == JOptionPane.YES_OPTION){
            productBus.delete(product.getId());
            this.dispose();
//            ui.refreshTable();
        }
        else{

        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    public void loadSup()
    {
        for(SupplierDTO sup : supplier.supList)
        {
            cbbSupplier.addItem(sup.getName());
        }
    }
    
    public void loadCategory()
    {
        for(PetProductTypeDTO type : typeBus.typeList)
        {
            cbbCategory.addItem(type.getName());
        }
    }
    
    public void setImage()
    {
        int labelWidth = 345;
        int labelHeight = 176;
        if(product.getImageUrl().equals("null"))
        {
            
        }
        else{
            
            String imageUrl = product.getImageUrl();
            ImageIcon imageIcon = new ImageIcon("src/com/image/" + imageUrl);
            Image image = imageIcon.getImage();
            Image newImage = image.getScaledInstance(labelWidth, labelHeight, Image.SCALE_SMOOTH);
            ImageIcon newImageIcon = new ImageIcon(newImage);
            lbImage.setIcon(newImageIcon);
        }
    }
    
    private void loadInfo()
    {
//        tfName.setText(product.getName()+"");
        lbNameID.setText(product.getName()+ " "+product.getId());
        supName = supplier.getName(product.getSupplierId());
        cbbSupplier.setSelectedItem(supName+"");
        
        String importPriceString = valid.formatMoney(product.getImportPrice());
        tfImportPrice.setText(""+importPriceString);
        
        typeName = typeBus.getName(product.getCategoryID());
        cbbCategory.setSelectedItem(typeName+"");
        
        String soldPriceString = valid.formatMoney(product.getSoldPrice());
        tfSoldPrice.setText(""+soldPriceString);
        
        tfInStock.setText(product.getInStock()+"");
        
        tfDescription.setText(product.getDescription());
        
        
    }
    
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(PetProductDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(PetProductDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(PetProductDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(PetProductDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new PetProductDetail().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddImage;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteImage;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbbCategory;
    private javax.swing.JComboBox<String> cbbSupplier;
    private javax.swing.JButton inputImPrice;
    private javax.swing.JButton inputSoldPrice;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbImage;
    private javax.swing.JLabel lbNameID;
    private javax.swing.JTextArea tfDescription;
    private javax.swing.JTextField tfImportPrice;
    private javax.swing.JTextField tfInStock;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfSoldPrice;
    // End of variables declaration//GEN-END:variables
}
